#!/bin/bash

# =============================================================================
# Audit Reporter Module - Report generation and export
# =============================================================================

# Configuration is loaded centrally in main.sh

# Calculate security score
calculate_security_score() {
    local report_file="$1"
    local score=100
    
    # Deduct points for security issues
    local fails=$(grep -c "\[FAIL\]" "$report_file" 2>/dev/null || echo "0")
    local warns=$(grep -c "\[WARN\]" "$report_file" 2>/dev/null || echo "0")
    
    score=$((score - fails * 10 - warns * 5))
    
    # Ensure score doesn't go below 0
    if [ "$score" -lt 0 ]; then
        score=0
    fi
    
    echo "$score"
}

# Generate audit summary
generate_audit_summary() {
    local summary_file="$1"
    local security_score="$2"
    local timestamp="$3"
    
    echo "VPS Security Audit Summary" > "$summary_file"
    echo "Generated at: $(date)" >> "$summary_file"
    echo "=============================" >> "$summary_file"
    echo "" >> "$summary_file"
    echo "Security Score: $security_score/100" >> "$summary_file"
    echo "" >> "$summary_file"
    
    # Add score interpretation
    if [ "$security_score" -ge 90 ]; then
        echo "Status: EXCELLENT - System is very secure" >> "$summary_file"
    elif [ "$security_score" -ge 80 ]; then
        echo "Status: GOOD - System is secure with minor issues" >> "$summary_file"
    elif [ "$security_score" -ge 70 ]; then
        echo "Status: FAIR - System needs attention" >> "$summary_file"
    elif [ "$security_score" -ge 60 ]; then
        echo "Status: POOR - System has security issues" >> "$summary_file"
    else
        echo "Status: CRITICAL - System has major security issues" >> "$summary_file"
    fi
    
    echo "" >> "$summary_file"
    echo "Full report: security-audit-${timestamp}.txt" >> "$summary_file"
    echo "Generated by: DebianForge Enhanced Audit Module" >> "$summary_file"
}

# Generate optimization report
generate_optimization_report() {
    local report_file="$1"
    local timestamp="$2"
    
    echo "VPS Optimization Report" > "$report_file"
    echo "Generated at: $(date)" >> "$report_file"
    echo "=========================" >> "$report_file"
    echo "" >> "$report_file"
    
    # Add system information
    echo "System Information:" >> "$report_file"
    echo "  - Hostname: $(hostname)" >> "$report_file"
    echo "  - OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2 2>/dev/null || echo 'Unknown')" >> "$report_file"
    echo "  - Kernel: $(uname -r)" >> "$report_file"
    echo "  - CPU Cores: $(nproc)" >> "$report_file"
    echo "  - Memory: $(free -h | awk '/^Mem:/ {print $2}')" >> "$report_file"
    echo "" >> "$report_file"
    
    # Add optimization recommendations
    echo "Optimization Recommendations:" >> "$report_file"
    echo "  - Run 'sudo ./main.sh' for system optimization" >> "$report_file"
    echo "  - Choose appropriate optimization modules" >> "$report_file"
    echo "  - Review security settings" >> "$report_file"
    echo "  - Monitor system performance" >> "$report_file"
    
    echo "" >> "$report_file"
    echo "Generated by: DebianForge Enhanced Audit Module" >> "$report_file"
}

# Export report to different formats
export_report_formats() {
    local report_file="$1"
    local timestamp="$2"
    
    # Export to HTML
    local html_file="security-audit-${timestamp}.html"
    echo "<html><head><title>Security Audit Report</title></head><body>" > "$html_file"
    echo "<h1>VPS Security Audit Report</h1>" >> "$html_file"
    echo "<p>Generated at: $(date)</p>" >> "$html_file"
    echo "<pre>" >> "$html_file"
    cat "$report_file" >> "$html_file"
    echo "</pre></body></html>" >> "$html_file"
    
    # Export to JSON
    local json_file="security-audit-${timestamp}.json"
    echo "{" > "$json_file"
    echo "  \"report_type\": \"security_audit\"," >> "$json_file"
    echo "  \"generated_at\": \"$(date -Iseconds)\"," >> "$json_file"
    echo "  \"hostname\": \"$(hostname)\"," >> "$json_file"
    echo "  \"os\": \"$(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2 2>/dev/null || echo 'Unknown')\"," >> "$json_file"
    echo "  \"kernel\": \"$(uname -r)\"" >> "$json_file"
    echo "}" >> "$json_file"
    
    echo "Reports exported to:"
    echo "  - HTML: $html_file"
    echo "  - JSON: $json_file"
}

# Send reports via email
send_reports() {
    local report_file="$1"
    local summary_file="$2"
    local email_address="$3"
    
    if command_exists mail; then
        echo "Sending audit report to $email_address..." >> "$report_file"
        
        # Send summary
        mail -s "VPS Security Audit Summary - $(hostname)" "$email_address" < "$summary_file"
        
        # Send full report
        mail -s "VPS Security Audit Report - $(hostname)" "$email_address" < "$report_file"
        
        echo "Reports sent successfully"
    else
        echo "Mail command not available. Install mailutils to enable email reports."
    fi
}

# Show audit summary
show_audit_summary() {
    yellow_msg 'Recent Audit Reports:'
    echo
    
    local reports=(security-audit-*.txt)
    local summaries=(security-summary-*.txt)
    
    if [ ${#reports[@]} -gt 0 ]; then
        echo "Detailed Reports:"
        for report in "${reports[@]}"; do
            if [ -f "$report" ]; then
                local timestamp=$(echo "$report" | sed 's/security-audit-\(.*\)\.txt/\1/')
                echo "  - $report (Generated: $timestamp)"
            fi
        done
        echo
    fi
    
    if [ ${#summaries[@]} -gt 0 ]; then
        echo "Summary Reports:"
        for summary in "${summaries[@]}"; do
            if [ -f "$summary" ]; then
                local timestamp=$(echo "$summary" | sed 's/security-summary-\(.*\)\.txt/\1/')
                echo "  - $summary (Generated: $timestamp)"
                
                # Show security score if available
                if [ -f "$summary" ]; then
                    local score=$(grep "Security Score:" "$summary" | awk '{print $3}' | cut -d'/' -f1)
                    if [ -n "$score" ]; then
                        echo "    Security Score: $score/100"
                    fi
                fi
            fi
        done
    else
        red_msg "No audit reports found"
    fi
}

# Generate executive summary
generate_executive_summary() {
    local summary_file="$1"
    local security_score="$2"
    local timestamp="$3"
    
    echo "VPS Security Executive Summary" > "$summary_file"
    echo "Generated at: $(date)" >> "$summary_file"
    echo "=================================" >> "$summary_file"
    echo "" >> "$summary_file"
    echo "Executive Summary:" >> "$summary_file"
    echo "  - Security Score: $security_score/100" >> "$summary_file"
    echo "  - System Status: $(get_system_status "$security_score")" >> "$summary_file"
    echo "  - Risk Level: $(get_risk_level "$security_score")" >> "$summary_file"
    echo "" >> "$summary_file"
    
    # Add key findings
    echo "Key Findings:" >> "$summary_file"
    echo "  - System security assessment completed" >> "$summary_file"
    echo "  - Detailed analysis available in full report" >> "$summary_file"
    echo "  - Recommendations provided for improvement" >> "$summary_file"
    echo "" >> "$summary_file"
    
    echo "Full report: security-audit-${timestamp}.txt" >> "$summary_file"
    echo "Generated by: Debian Optimizer Enhanced Audit Module" >> "$summary_file"
}

# Get system status
get_system_status() {
    local score="$1"
    
    if [ "$score" -ge 90 ]; then
        echo "EXCELLENT"
    elif [ "$score" -ge 80 ]; then
        echo "GOOD"
    elif [ "$score" -ge 70 ]; then
        echo "FAIR"
    elif [ "$score" -ge 60 ]; then
        echo "POOR"
    else
        echo "CRITICAL"
    fi
}

# Get risk level
get_risk_level() {
    local score="$1"
    
    if [ "$score" -ge 90 ]; then
        echo "LOW"
    elif [ "$score" -ge 80 ]; then
        echo "MEDIUM-LOW"
    elif [ "$score" -ge 70 ]; then
        echo "MEDIUM"
    elif [ "$score" -ge 60 ]; then
        echo "MEDIUM-HIGH"
    else
        echo "HIGH"
    fi
}
